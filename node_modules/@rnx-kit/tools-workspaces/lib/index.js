"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findWorkspaceRootSync = exports.findWorkspaceRoot = exports.findWorkspacePackagesSync = exports.findWorkspacePackages = void 0;
const path = __importStar(require("path"));
const common_1 = require("./common");
/**
 * Returns a list of all packages declared under workspaces.
 */
async function findWorkspacePackages() {
    const sentinel = await (0, common_1.findSentinel)();
    if (!sentinel) {
        return [];
    }
    const { findWorkspacePackages } = await (0, common_1.getImplementation)(sentinel);
    return await findWorkspacePackages(sentinel);
}
exports.findWorkspacePackages = findWorkspacePackages;
/**
 * Returns a list of all packages declared under workspaces synchronously.
 */
function findWorkspacePackagesSync() {
    const sentinel = (0, common_1.findSentinelSync)();
    if (!sentinel) {
        return [];
    }
    const { findWorkspacePackagesSync } = (0, common_1.getImplementationSync)(sentinel);
    return findWorkspacePackagesSync(sentinel);
}
exports.findWorkspacePackagesSync = findWorkspacePackagesSync;
/**
 * Returns the root of the workspace; `undefined` if not a workspace.
 */
async function findWorkspaceRoot() {
    const sentinel = await (0, common_1.findSentinel)();
    return sentinel && path.dirname(sentinel);
}
exports.findWorkspaceRoot = findWorkspaceRoot;
/**
 * Returns the root of the workspace synchronously; `undefined` if not a
 * workspace.
 */
function findWorkspaceRootSync() {
    const sentinel = (0, common_1.findSentinelSync)();
    return sentinel && path.dirname(sentinel);
}
exports.findWorkspaceRootSync = findWorkspaceRootSync;
//# sourceMappingURL=index.js.map