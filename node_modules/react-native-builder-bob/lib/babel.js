"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const isFile = filename => {
  const exists = _fs.default.lstatSync(filename, {
    throwIfNoEntry: false
  })?.isFile() ?? false;
  return exists;
};
const isDirectory = filename => {
  const exists = _fs.default.lstatSync(filename, {
    throwIfNoEntry: false
  })?.isDirectory() ?? false;
  return exists;
};
const isModule = (filename, extension, platforms) => {
  const exts = ['js', 'ts', 'jsx', 'tsx', extension];
  return exts.some(ext => isFile(`${filename}.${ext}`) && platforms.every(platform => !isFile(`${filename}.${platform}.${ext}`)));
};
const isTypeImport = node => 'importKind' in node && node.importKind === 'type' || 'exportKind' in node && node.exportKind === 'type';
const assertFilename = filename => {
  if (filename == null) {
    throw new Error("Couldn't find a filename for the current file.");
  }
};
function _default(api, {
  extension,
  platforms = ['native', 'android', 'ios', 'windows', 'macos', 'visionos', 'web', 'tv', 'android.tv', 'ios.tv']
}) {
  api.assertVersion(7);
  function addExtension({
    node
  }, state) {
    if (extension == null ||
    // Skip type imports as they'll be removed
    isTypeImport(node) ||
    // Skip non-relative imports
    !node.source?.value.startsWith('.')) {
      return;
    }
    assertFilename(state.filename);

    // Skip folder imports
    const filename = _path.default.resolve(_path.default.dirname(state.filename), node.source.value);

    // Replace .ts extension with .js if file with extension is explicitly imported
    if (isFile(filename)) {
      node.source.value = node.source.value.replace(/\.tsx?$/, `.${extension}`);
      return;
    }

    // Add extension if .ts file or file with extension exists
    if (isModule(filename, extension, platforms)) {
      node.source.value += `.${extension}`;
      return;
    }

    // Expand folder imports to index and add extension
    if (isDirectory(filename) && isModule(_path.default.join(filename, 'index'), extension, platforms)) {
      node.source.value = node.source.value.replace(/\/?$/, `/index.${extension}`);
      return;
    }
  }
  return {
    name: 'react-native-builder-bob',
    visitor: {
      ImportDeclaration(path, state) {
        addExtension(path, state);
      },
      ExportNamedDeclaration(path, state) {
        addExtension(path, state);
      },
      ExportAllDeclaration(path, state) {
        addExtension(path, state);
      }
    }
  };
}
//# sourceMappingURL=babel.js.map