"use strict";

var _path = _interopRequireDefault(require("path"));
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _kleur = _interopRequireDefault(require("kleur"));
var _dedent = _interopRequireDefault(require("dedent"));
var _yargs = _interopRequireDefault(require("yargs"));
var _cosmiconfig = require("cosmiconfig");
var _isGitDirty = _interopRequireDefault(require("is-git-dirty"));
var _prompts = _interopRequireDefault(require("./utils/prompts"));
var logger = _interopRequireWildcard(require("./utils/logger"));
var _commonjs = _interopRequireDefault(require("./targets/commonjs"));
var _module = _interopRequireDefault(require("./targets/module"));
var _typescript = _interopRequireDefault(require("./targets/typescript"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// eslint-disable-next-line import/no-commonjs, @typescript-eslint/no-var-requires
const {
  name,
  version
} = require('../package.json');
const root = process.cwd();
const explorer = (0, _cosmiconfig.cosmiconfig)(name, {
  stopDir: root,
  searchPlaces: ['package.json', 'bob.config.mjs', 'bob.config.cjs', 'bob.config.js']
});
const FLOW_PRGAMA_REGEX = /\*?\s*@(flow)\b/m;
_yargs.default.command('init', 'configure the package to use bob', {}, async () => {
  if ((0, _isGitDirty.default)()) {
    const {
      shouldContinue
    } = await (0, _prompts.default)({
      type: 'confirm',
      name: 'shouldContinue',
      message: `The working directory is not clean.\n  You should commit or stash your changes before configuring bob.\n  Continue anyway?`,
      initial: false
    });
    if (!shouldContinue) {
      process.exit(0);
    }
  }
  const pak = _path.default.join(root, 'package.json');
  if (!(await _fsExtra.default.pathExists(pak))) {
    logger.exit(`Couldn't find a 'package.json' file in '${root}'.\n  Are you in a project folder?`);
  }
  const pkg = JSON.parse(await _fsExtra.default.readFile(pak, 'utf-8'));
  const result = await explorer.search();
  if (result?.config && pkg.devDependencies && name in pkg.devDependencies) {
    const {
      shouldContinue
    } = await (0, _prompts.default)({
      type: 'confirm',
      name: 'shouldContinue',
      message: `The project seems to be already configured with bob.\n  Do you want to overwrite the existing configuration?`,
      initial: false
    });
    if (!shouldContinue) {
      process.exit(0);
    }
  }
  const {
    source
  } = await (0, _prompts.default)({
    type: 'text',
    name: 'source',
    message: 'Where are your source files?',
    initial: 'src',
    validate: input => Boolean(input)
  });
  let entryFile;
  if (await _fsExtra.default.pathExists(_path.default.join(root, source, 'index.js'))) {
    entryFile = 'index.js';
  } else if (await _fsExtra.default.pathExists(_path.default.join(root, source, 'index.ts'))) {
    entryFile = 'index.ts';
  } else if (await _fsExtra.default.pathExists(_path.default.join(root, source, 'index.tsx'))) {
    entryFile = 'index.tsx';
  }
  if (!entryFile) {
    logger.exit(`Couldn't find a 'index.js'. 'index.ts' or 'index.tsx' file under '${source}'.\n  Please re-run the CLI after creating it.`);
    return;
  }
  pkg.devDependencies = Object.fromEntries([...Object.entries(pkg.devDependencies || {}), [name, `^${version}`]].sort(([a], [b]) => a.localeCompare(b)));
  const questions = [{
    type: 'text',
    name: 'output',
    message: 'Where do you want to generate the output files?',
    initial: 'lib',
    validate: input => Boolean(input)
  }, {
    type: 'multiselect',
    name: 'targets',
    message: 'Which targets do you want to build?',
    choices: [{
      title: 'commonjs - for running in Node (tests, SSR etc.)',
      value: 'commonjs',
      selected: true
    }, {
      title: 'module - for bundlers (metro, webpack etc.)',
      value: 'module',
      selected: true
    }, {
      title: 'typescript - declaration files for typechecking',
      value: 'typescript',
      selected: /\.tsx?$/.test(entryFile)
    }],
    validate: input => Boolean(input.length)
  }];
  if (entryFile.endsWith('.js') && FLOW_PRGAMA_REGEX.test(await _fsExtra.default.readFile(_path.default.join(root, source, entryFile), 'utf-8'))) {
    questions.push({
      type: 'confirm',
      name: 'flow',
      message: 'Do you want to publish definitions for flow?',
      initial: Object.keys(pkg.devDependencies || {}).includes('flow-bin')
    });
  }
  const {
    output,
    targets,
    flow
  } = await (0, _prompts.default)(questions);
  const target = targets[0] === 'commonjs' || targets[0] === 'module' ? targets[0] : undefined;
  const entries = {
    source: `./${_path.default.join(source, entryFile)}`
  };
  let esm = false;
  if (targets.includes('module')) {
    esm = true;
    if (targets.includes('commonjs')) {
      entries.main = `./${_path.default.join(output, 'commonjs', 'index.js')}`;
    }
    entries.module = `./${_path.default.join(output, 'module', 'index.js')}`;
  } else if (targets.includes('commonjs')) {
    entries.main = `./${_path.default.join(output, 'commonjs', 'index.js')}`;
  } else {
    entries.main = entries.source;
  }
  const types = {};
  if (targets.includes('typescript')) {
    types.require = `./${_path.default.join(output, 'typescript', 'commonjs', source, 'index.d.ts')}`;
    types.import = `./${_path.default.join(output, 'typescript', 'module', source, 'index.d.ts')}`;
    entries.types = types.require;
    if (!(await _fsExtra.default.pathExists(_path.default.join(root, 'tsconfig.json')))) {
      const {
        tsconfig
      } = await (0, _prompts.default)({
        type: 'confirm',
        name: 'tsconfig',
        message: `You have enabled 'typescript' compilation, but we couldn't find a 'tsconfig.json' in project root.\n  Generate one?`,
        initial: true
      });
      if (tsconfig) {
        await _fsExtra.default.writeJSON(_path.default.join(root, 'tsconfig.json'), {
          compilerOptions: {
            rootDir: '.',
            allowUnreachableCode: false,
            allowUnusedLabels: false,
            esModuleInterop: true,
            forceConsistentCasingInFileNames: true,
            jsx: 'react-jsx',
            lib: ['ESNext'],
            module: 'ESNext',
            moduleResolution: 'Bundler',
            noFallthroughCasesInSwitch: true,
            noImplicitReturns: true,
            noImplicitUseStrict: false,
            noStrictGenericChecks: false,
            noUncheckedIndexedAccess: true,
            noUnusedLocals: true,
            noUnusedParameters: true,
            resolveJsonModule: true,
            skipLibCheck: true,
            strict: true,
            target: 'ESNext',
            verbatimModuleSyntax: true
          }
        }, {
          spaces: 2
        });
      }
    }
  }
  const prepare = 'bob build';
  const files = [source, output, '!**/__tests__', '!**/__fixtures__', '!**/__mocks__'];
  for (const key in entries) {
    const entry = entries[key];
    if (pkg[key] && pkg[key] !== entry) {
      const {
        replace
      } = await (0, _prompts.default)({
        type: 'confirm',
        name: 'replace',
        message: `Your package.json has the '${key}' field set to '${pkg[key]}'.\n  Do you want to replace it with '${entry}'?`,
        initial: true
      });
      if (replace) {
        pkg[key] = entry;
      }
    } else {
      pkg[key] = entry;
    }
  }
  if (esm) {
    let replace = false;
    const exports = {
      '.': {
        import: {
          ...(types.import ? {
            types: types.import
          } : null),
          ...(entries.module ? {
            default: entries.module
          } : null)
        },
        require: {
          ...(types.require ? {
            types: types.require
          } : null),
          ...(entries.main ? {
            default: entries.main
          } : null)
        }
      }
    };
    if (pkg.exports && JSON.stringify(pkg.exports) !== JSON.stringify(exports)) {
      replace = (await (0, _prompts.default)({
        type: 'confirm',
        name: 'replace',
        message: `Your package.json has 'exports' field set.\n  Do you want to replace it?`,
        initial: true
      })).replace;
    } else {
      replace = true;
    }
    if (replace) {
      pkg.exports = exports;
    }
  }
  if (pkg['react-native'] && (pkg['react-native'].startsWith(source) || pkg['react-native'].startsWith(`./${source}`))) {
    const {
      remove
    } = await (0, _prompts.default)({
      type: 'confirm',
      name: 'remove',
      message: `Your package.json has the 'react-native' field pointing to source code.\n  This can cause problems when customizing babel configuration.\n  Do you want to remove it?`,
      initial: true
    });
    if (remove) {
      delete pkg['react-native'];
    }
  }
  if (pkg.scripts?.prepare && pkg.scripts.prepare !== prepare) {
    const {
      replace
    } = await (0, _prompts.default)({
      type: 'confirm',
      name: 'replace',
      message: `Your package.json has the 'scripts.prepare' field set to '${pkg.scripts.prepare}'.\n  Do you want to replace it with '${prepare}'?`,
      initial: true
    });
    if (replace) {
      pkg.scripts.prepare = prepare;
    }
  } else {
    pkg.scripts = pkg.scripts || {};
    pkg.scripts.prepare = prepare;
  }
  if (pkg.files) {
    const pkgFiles = pkg.files;
    if (files?.some(file => !pkgFiles.includes(file))) {
      const {
        update
      } = await (0, _prompts.default)({
        type: 'confirm',
        name: 'update',
        message: `Your package.json already has a 'files' field.\n  Do you want to update it?`,
        initial: true
      });
      if (update) {
        pkg.files = [...files, ...pkg.files.filter(file => !files.includes(file))];
      }
    }
  } else {
    pkg.files = files;
  }
  pkg[name] = {
    source,
    output,
    targets: targets.map(t => {
      if (t === target && flow) {
        return [t, {
          copyFlow: true
        }];
      }
      if (t === 'commonjs' || t === 'module' || t === 'typescript') {
        return [t, {
          esm
        }];
      }
      return t;
    })
  };
  if (pkg.jest) {
    const entry = `<rootDir>/${output}/`;
    if (pkg.jest.modulePathIgnorePatterns) {
      const {
        modulePathIgnorePatterns
      } = pkg.jest;
      if (!modulePathIgnorePatterns.includes(entry)) {
        modulePathIgnorePatterns.push(entry);
      }
    } else {
      pkg.jest.modulePathIgnorePatterns = [entry];
    }
  }
  pkg.eslintIgnore = pkg.eslintIgnore || ['node_modules/'];
  if (!pkg.eslintIgnore.includes(`${output}/`)) {
    pkg.eslintIgnore.push(`${output}/`);
  }
  await _fsExtra.default.writeJSON(pak, pkg, {
    spaces: 2
  });
  const ignorefiles = [_path.default.join(root, '.gitignore'), _path.default.join(root, '.eslintignore')];
  for (const ignorefile of ignorefiles) {
    if (await _fsExtra.default.pathExists(ignorefile)) {
      const content = await _fsExtra.default.readFile(ignorefile, 'utf-8');
      if (!content.split('\n').includes(`${output}/`)) {
        await _fsExtra.default.writeFile(ignorefile, `${content}\n# generated by bob\n${output}/\n`);
      }
    }
  }
  const packageManager = (await _fsExtra.default.pathExists(_path.default.join(root, 'yarn.lock'))) ? 'yarn' : 'npm';
  console.log((0, _dedent.default)(`
      Project ${_kleur.default.yellow(pkg.name)} configured successfully!

      ${_kleur.default.magenta(`${_kleur.default.bold('Perform last steps')} by running`)}${_kleur.default.gray(':')}

        ${_kleur.default.gray('$')} ${packageManager} install

      ${_kleur.default.yellow('Good luck!')}
    `));
}).command('build', 'build files for publishing', {}, async argv => {
  const result = await explorer.search();
  if (!result?.config) {
    logger.exit(`No configuration found. Run '${argv.$0} init' to create one automatically.`);
  }
  const options = result.config;
  if (!options.targets?.length) {
    logger.exit(`No targets found in the configuration in '${_path.default.relative(root, result.filepath)}'.`);
  }
  const source = options.source;
  if (!source) {
    logger.exit(`No source option found in the configuration in '${_path.default.relative(root, result.filepath)}'.`);
  }
  const output = options.output;
  if (!output) {
    logger.exit(`No source option found in the configuration in '${_path.default.relative(root, result.filepath)}'.`);
  }
  const exclude = options.exclude ?? '**/{__tests__,__fixtures__,__mocks__}/**';
  const report = {
    info: logger.info,
    warn: logger.warn,
    error: logger.error,
    success: logger.success
  };
  for (const target of options.targets) {
    const targetName = Array.isArray(target) ? target[0] : target;
    const targetOptions = Array.isArray(target) ? target[1] : undefined;
    report.info(`Building target ${_kleur.default.blue(targetName)}`);
    switch (targetName) {
      case 'commonjs':
        await (0, _commonjs.default)({
          root,
          source: _path.default.resolve(root, source),
          output: _path.default.resolve(root, output, 'commonjs'),
          exclude,
          options: targetOptions,
          report
        });
        break;
      case 'module':
        await (0, _module.default)({
          root,
          source: _path.default.resolve(root, source),
          output: _path.default.resolve(root, output, 'module'),
          exclude,
          options: targetOptions,
          report
        });
        break;
      case 'typescript':
        await (0, _typescript.default)({
          root,
          source: _path.default.resolve(root, source),
          output: _path.default.resolve(root, output, 'typescript'),
          options: targetOptions,
          report
        });
        break;
      default:
        logger.exit(`Invalid target ${_kleur.default.blue(targetName)}.`);
    }
  }
}).demandCommand().recommendCommands().strict().argv;
//# sourceMappingURL=index.js.map