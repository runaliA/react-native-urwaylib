{"version":3,"file":"babel.js","names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","isFile","filename","exists","fs","lstatSync","throwIfNoEntry","isDirectory","isModule","extension","platforms","exts","some","ext","every","platform","isTypeImport","node","importKind","exportKind","assertFilename","Error","_default","api","assertVersion","addExtension","state","source","value","startsWith","path","resolve","dirname","replace","join","name","visitor","ImportDeclaration","ExportNamedDeclaration","ExportAllDeclaration"],"sources":["../src/babel.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport type { ConfigAPI, NodePath, PluginObj, PluginPass } from '@babel/core';\nimport type {\n  ImportDeclaration,\n  ExportAllDeclaration,\n  ExportNamedDeclaration,\n} from '@babel/types';\n\ntype Options = {\n  /**\n   * Extension to add to the imports\n   * For commonjs use 'cjs' and for esm use 'mjs'\n   * NodeJS requires explicit extension for esm\n   * The `cjs` extension avoids disambiguity when package.json has \"type\": \"module\"\n   */\n  extension?: 'js' | 'cjs' | 'mjs';\n  /**\n   * Out of tree platforms to support\n   * For `import './file'`, we skip adding extension if `file.${platform}.ts` exists\n   * This is necessary for the platform specific extensions to be resolve correctly\n   * Bundlers won't resolve the platform specific extension if explicit extension is present\n   */\n  platforms?: string[];\n};\n\nconst isFile = (filename: string): boolean => {\n  const exists =\n    fs.lstatSync(filename, { throwIfNoEntry: false })?.isFile() ?? false;\n\n  return exists;\n};\n\nconst isDirectory = (filename: string): boolean => {\n  const exists =\n    fs.lstatSync(filename, { throwIfNoEntry: false })?.isDirectory() ?? false;\n\n  return exists;\n};\n\nconst isModule = (\n  filename: string,\n  extension: string,\n  platforms: string[]\n): boolean => {\n  const exts = ['js', 'ts', 'jsx', 'tsx', extension];\n\n  return exts.some(\n    (ext) =>\n      isFile(`${filename}.${ext}`) &&\n      platforms.every((platform) => !isFile(`${filename}.${platform}.${ext}`))\n  );\n};\n\nconst isTypeImport = (\n  node: ImportDeclaration | ExportNamedDeclaration | ExportAllDeclaration\n) =>\n  ('importKind' in node && node.importKind === 'type') ||\n  ('exportKind' in node && node.exportKind === 'type');\n\nconst assertFilename: (\n  filename: string | null | undefined\n) => asserts filename is string = (filename) => {\n  if (filename == null) {\n    throw new Error(\"Couldn't find a filename for the current file.\");\n  }\n};\n\nexport default function (\n  api: ConfigAPI,\n  {\n    extension,\n    platforms = [\n      'native',\n      'android',\n      'ios',\n      'windows',\n      'macos',\n      'visionos',\n      'web',\n      'tv',\n      'android.tv',\n      'ios.tv',\n    ],\n  }: Options\n): PluginObj {\n  api.assertVersion(7);\n\n  function addExtension(\n    {\n      node,\n    }: NodePath<\n      ImportDeclaration | ExportNamedDeclaration | ExportAllDeclaration\n    >,\n    state: PluginPass\n  ) {\n    if (\n      extension == null ||\n      // Skip type imports as they'll be removed\n      isTypeImport(node) ||\n      // Skip non-relative imports\n      !node.source?.value.startsWith('.')\n    ) {\n      return;\n    }\n\n    assertFilename(state.filename);\n\n    // Skip folder imports\n    const filename = path.resolve(\n      path.dirname(state.filename),\n      node.source.value\n    );\n\n    // Replace .ts extension with .js if file with extension is explicitly imported\n    if (isFile(filename)) {\n      node.source.value = node.source.value.replace(/\\.tsx?$/, `.${extension}`);\n      return;\n    }\n\n    // Add extension if .ts file or file with extension exists\n    if (isModule(filename, extension, platforms)) {\n      node.source.value += `.${extension}`;\n      return;\n    }\n\n    // Expand folder imports to index and add extension\n    if (\n      isDirectory(filename) &&\n      isModule(path.join(filename, 'index'), extension, platforms)\n    ) {\n      node.source.value = node.source.value.replace(\n        /\\/?$/,\n        `/index.${extension}`\n      );\n      return;\n    }\n  }\n\n  return {\n    name: 'react-native-builder-bob',\n    visitor: {\n      ImportDeclaration(path, state) {\n        addExtension(path, state);\n      },\n      ExportNamedDeclaration(path, state) {\n        addExtension(path, state);\n      },\n      ExportAllDeclaration(path, state) {\n        addExtension(path, state);\n      },\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]}